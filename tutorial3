import numpy as np

# Example dataset with 2 features and 2 classes
X = np.array([[2, 3], [3, 5], [5, 8], [6, 10],  # Class 0
              [7, 2], [8, 3], [9, 4], [10, 5]]) # Class 1
y = np.array([0, 0, 0, 0, 1, 1, 1, 1])  # Labels

# Step 1: Compute class means
class_0 = X[y == 0]  # Extract class 0 samples
class_1 = X[y == 1]  # Extract class 1 samples

mean_0 = np.mean(class_0, axis=0).reshape(2, 1)  # Column vector
mean_1 = np.mean(class_1, axis=0).reshape(2, 1)  # Column vector

# Step 2: Compute within-class scatter matrix (Sw)
S_w = np.zeros((2, 2))  # Initialize Sw as a 2x2 zero matrix

for x in class_0:
    x = x.reshape(2, 1)
    S_w += (x - mean_0) @ (x - mean_0).T  # Outer product

for x in class_1:
    x = x.reshape(2, 1)
    S_w += (x - mean_1) @ (x - mean_1).T  # Outer product

# Step 3: Compute between-class scatter matrix (Sb)
mean_diff = (mean_1 - mean_0)  # Difference of means
S_b = mean_diff @ mean_diff.T  # Outer product

# Step 4: Solve the eigenvalue problem for Sw^-1 Sb
S_w_inv = np.linalg.inv(S_w)  # Inverse of Sw
lda_matrix = S_w_inv @ S_b  # Compute Sw^-1 * Sb

# Step 5: Compute eigenvectors
eigenvalues, eigenvectors = np.linalg.eig(lda_matrix)

# Step 6: Extract the most significant eigenvector (corresponding to max eigenvalue)
lda_projection_matrix = eigenvectors[:, np.argmax(eigenvalues)].reshape(2, 1)

print("LDA Transformation Matrix (2x1):\n", lda_projection_matrix)
